plugins {
    id("org.asciidoctor.jvm.convert") version "$asciidoctorPluginVersion"
    id("groovy")
    id("com.github.johnrengelman.shadow") version "$shadowPluginVersion"
    id("io.micronaut.application") version "$micronautPluginVersion"
}

version = "0.1"
group = "lost.canvas"

apply from: "gradle/asciidoc.gradle"
repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("lost.canvas.micronaut_test.*")
    }
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-http-client")
    compileOnly("org.projectlombok:lombok")
    //swagger
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    implementation("io.swagger.core.v3:swagger-annotations")
    //validate
    implementation("io.micronaut:micronaut-validation")
//    implementation("io.micronaut.beanvalidation:micronaut-hibernate-validator")
    //db
    runtimeOnly("mysql:mysql-connector-java:$mysqlVersion")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    //log
    implementation("org.apache.logging.log4j:log4j-core:$log4jVersion")
    runtimeOnly("org.apache.logging.log4j:log4j-api:$log4jVersion")
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion")
    //management
    annotationProcessor("io.micronaut:micronaut-management")
    implementation("io.micronaut:micronaut-management")
    //micrometer
    compile("io.micronaut.micrometer:micronaut-micrometer-core")
    compile("io.micronaut.micrometer:micronaut-micrometer-registry-statsd")
}


application {
    mainClass.set("lost.canvas.micronaut_test.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("$javaVersion")
    targetCompatibility = JavaVersion.toVersion("$javaVersion")
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.fork = true
    //swagger-view
    options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=rapidoc.enabled=true,swagger-ui.enabled=true,swagger-ui.theme=flattop'
}


